#include <Arduino.h> 
#include <ESP8266WiFi.h> 
#include <SPI.h> 
#include <MFRC522.h> 
#include <HTTPSRedirect.h> 
#include <Wire.h> 
#include <LiquidCrystal_I2C.h> 
LiquidCrystal_I2C lcd(0x27, 16, 2); 

const char *GScriptId =  "App script deployment id” //Replace with app script id
String gate_number = "Gate1"; 
const char* ssid = "your wifi name"; //wifi name 
const char* password = "wifi password"; //wifi password
const char* host = "script.google.com"; 
const int httpsPort = 443; 
String url = String("/macros/s/") + GScriptId + "/exec"; 
HTTPSRedirect* client = nullptr; 
String payload_base = "{\"command\": \"insert_row\", \"sheet_name\": \"Sheet1\",  \"values\": "; 
String payload = ""; 
String student_id, first_name, last_name, address; 
int blocks[] = {4, 5, 6, 8, 9};


#define total_blocks (sizeof(blocks) / sizeof(blocks[0])) 
#define RST_PIN 0 //D3 
#define SS_PIN 2 //D4 
#define BUZZER 15 //D2 
MFRC522 mfrc522(SS_PIN, RST_PIN);  
MFRC522::MIFARE_Key key;  
MFRC522::StatusCode status; 
byte bufferLen = 18; 
byte readBlockData[18]; 
void getRFIDDetails(String rfid) 
{ 
if (rfid == "") { // Replace with actual RFID UID 
	first_name = ""; 
	last_name = ""; 
	address = “”; 
}  
else if (rfid == "") { // Example UID 
	first_name = ""; 
	last_name = ""; 
	address = ""; 
}  
else if (rfid == "") { // Example UID 
	first_name = ""; 
	last_name = ""; 	
	address = ""; 
}  
else if (rfid == "") { // Example UID 
	first_name = ""; 
	last_name = ""; 
	address = ""; 
} 
else { 
Serial.println("Unknown RFID scanned!"); 
	first_name = ""; 
	last_name = ""; 
	address = ""; 
} 
} 
void ReadDataFromBlock(int blockNum, byte readBlockData[]) { 
	for (byte i = 0; i < 6; i++) { 
		key.keyByte[i] = 0xFF; 
	} 
status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A,  blockNum, &key, &(mfrc522.uid)); 
if (status != MFRC522::STATUS_OK) { 
	Serial.print("Authentication failed for Read: "); 
	Serial.println(mfrc522.GetStatusCodeName(status)); 
	return; 
} 
status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen); 
if (status != MFRC522::STATUS_OK) { 
	Serial.print("Reading failed: "); 
	Serial.println(mfrc522.GetStatusCodeName(status)); 
	return; 
}  
else { 
	readBlockData[16] = ' '; 
	readBlockData[17] = ' '; 
	Serial.println("Block was read successfully");  
} 
} 
void setup() { 
	Serial.begin(9600); 
	delay(10); 
	Serial.println('\n'); 	
	SPI.begin(); 
	mfrc522.PCD_Init(); 
	lcd.init(); 
	lcd.backlight(); 
 	lcd.clear(); 
	lcd.setCursor(0, 0); 
	lcd.print("Connecting to"); 
	lcd.setCursor(0, 1); 
	lcd.print("WiFi..."); 
	pinMode(BUZZER, OUTPUT); 
 	WiFi.begin(ssid, password);  
	while (WiFi.status() != WL_CONNECTED) {
	 delay(1000); 
	Serial.print("."); 
	} 
	Serial.println('\n'); 
	Serial.println("WiFi Connected!"); 
	client = new HTTPSRedirect(httpsPort); client->setInsecure(); 
	client->setPrintResponseBody(true); 
	client->setContentTypeHeader("application/json"); lcd.clear(); 
	lcd.setCursor(0, 0); 
	lcd.print("Connecting to"); 
	lcd.setCursor(0, 1); 
	lcd.print("Google "); 
	delay(5000); 
 	bool flag = false; 
	for (int i = 0; i < 5; i++) {  
		int retval = client->connect(host, httpsPort);
		if (retval == 1) { 
 			flag = true; 
			Serial.println("Connected to Google!"); 
			lcd.clear(); 
			lcd.setCursor(0, 0); 
			lcd.print("Connected."); 
			delay(2000); 
			break; 	
		}  
		else { 
			Serial.println("Connection failed. Retrying..."); 
		} 
	} 
	if (!flag) { 
		lcd.clear(); 
		lcd.setCursor(0, 0); 	
		lcd.print("Connection fail"); 
		Serial.println("Could not connect to server"); 
		delay(5000); 
		return; 
	} 
} 
void loop() { 
	lcd.clear(); 
	lcd.setCursor(0, 0); 
	lcd.print("Scan your Tag"); 
	if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) { return; 
} 
student_id = ""; 
for (byte i = 0; i < mfrc522.uid.size; i++) { 
	student_id += String(mfrc522.uid.uidByte[i], HEX);}
	student_id.toUpperCase(); // Ensure UID is in uppercase 
	Serial.println("RFID scanned: " + student_id); 
	getRFIDDetails(student_id); 
	if (first_name != "") { 
		String values = "\"" + student_id + ","; 
		values += first_name + ","; 
		values += last_name + ","; 
		values += address + ","; 
		values += gate_number + "\"}"; 
		payload = payload_base + values; 
 		lcd.clear(); 
		lcd.setCursor(0, 0); 
		lcd.print("Publishing Data"); 
		if (client->POST(url, host, payload)) { 
		Serial.println("[OK] Data published."); 
		lcd.clear(); 
		lcd.setCursor(0, 0); 
		lcd.print("Data Sent!"); 
	// Buzzer for successful scan 
		digitalWrite(BUZZER, HIGH); // Turn on the buzzer 
		delay(500); // Keep it on for 500ms 
		digitalWrite(BUZZER, LOW); // Turn off the buzzer 
	}  
	else { 
		Serial.println("Error while connecting"); 
		lcd.clear(); 
		lcd.setCursor(0, 0); 
		lcd.print("Failed.");// Buzzer for failed connection for (int i = 0; i < 3; i++) { // Beep 3 times 
		digitalWrite(BUZZER, HIGH); // Turn on the buzzer delay(200); // Wait for 200ms 
		digitalWrite(BUZZER, LOW); // Turn off the buzzer
		delay(200); // Wait for 200ms before next beep 
	} 
	} 
delay(5000); // Delay before next scan 
} 
